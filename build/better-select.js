// Generated by CoffeeScript 1.3.3
(function() {
  var $$, BetterSelect, addClass, build_element, getClasses, getLeft, getPos, getTop, letters, numbers, removeClass, renderOption, renderOptionGroup, setClasses;

  $$ = function(html) {
    var elm;
    elm = document.createElement('div');
    elm.innerHTML = html;
    if (elm.children.length > 1) {
      return elm.children;
    } else {
      return elm.children[0];
    }
  };

  getPos = function(tgt, method) {
    var pos;
    pos = 0;
    while (tgt) {
      pos += tgt[method];
      tgt = tgt.offsetParent;
    }
    return pos;
  };

  getTop = function(tgt) {
    return getPos(tgt, 'offsetTop');
  };

  getLeft = function(tgt) {
    return getPos(tgt, 'offsetLeft');
  };

  getClasses = function(tgt) {
    return tgt.getAttribute('class').split(' ');
  };

  setClasses = function(tgt, classes) {
    tgt.setAttribute('class', classes.join(' '));
    return tgt;
  };

  addClass = function(tgt, className) {
    var classes;
    if ((classes = getClasses(tgt)).indexOf(className) === -1) {
      classes.push(className);
    }
    return setClasses(tgt, classes);
  };

  removeClass = function(tgt, className) {
    var classes, index;
    if ((index = (classes = getClasses(tgt)).indexOf(className)) !== -1) {
      classes.splice(index, 1);
    }
    return setClasses(tgt, classes);
  };

  letters = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'.split(' ');

  numbers = '0 1 2 3 4 5 6 7 8 9 0'.split(' ');

  build_element = function(what, orig, obj) {
    var elm;
    ((elm = $$(_.template(obj["" + what + "_template"])(obj["process_" + what](orig)))).orig = orig).better_version = elm;
    elm.better_select = obj;
    return elm;
  };

  renderOption = function(orig_option, bs) {
    var first_char, option;
    option = build_element('option', orig_option, bs);
    option.reset = function() {
      this.orig.selected = void 0;
      this.setAttribute('class', 'option');
      return bs.reset(this);
    };
    option.select = function() {
      this.orig.selected = 'selected';
      this.setAttribute('class', 'option selected');
      bs.set_selected(option);
      if (bs.open) {
        return bs.toggle();
      }
    };
    option.addEventListener('click', function() {
      return option.select();
    });
    option.addEventListener('mouseover', function() {
      return option.better_select.set_focused(option);
    });
    bs.options.push(option);
    first_char = option.innerHTML.substr(0, 1).toLowerCase();
    if (!bs.options_by_first_char[first_char]) {
      bs.options_by_first_char[first_char] = [];
      bs.options_by_first_char[first_char].sort = function() {
        var sorted;
        (sorted = _(this).sortBy('innerHTML')).unshift(0, this.length);
        return this.splice.apply(this, sorted);
      };
    }
    bs.options_by_first_char[first_char].push(option);
    bs.options_by_first_char[first_char].sort();
    return option;
  };

  renderOptionGroup = function(orig_group, bs) {
    var child, group, _i, _len, _ref;
    group = build_element('option_group', orig_group, bs);
    _ref = orig_group.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      group.appendChild(renderOption(child, bs));
    }
    bs.option_groups.push(group);
    return group;
  };

  BetterSelect = (function() {

    BetterSelect.prototype.defaults = {
      positionDropdown: true,
      resizeDropdown: true
    };

    function BetterSelect(elm, options) {
      var child, children, method, selected, _i, _len, _ref,
        _this = this;
      if (!(elm && elm.tagName && elm.tagName === 'SELECT')) {
        return;
      }
      this.settings = _.extend({}, this.defaults, options);
      this.options = [];
      this.options_by_first_char = {};
      this.option_groups = [];
      selected = elm.selectedOptions;
      this.select = build_element('select', elm, this);
      _ref = this.select.children, this.selected_option = _ref[0], this.dropdown = _ref[1];
      this.selected_option.better_select = this;
      if (elm.id) {
        this.select.id = "" + elm.id + "-better-select";
        this.dropdown.id = "" + elm.id + "-better-select-dropdown";
      }
      this.default_selected = [elm.children[elm.selectedIndex]];
      elm.parentNode.insertBefore(this.select, elm);
      elm.parentNode.insertBefore(elm, this.select);
      elm.style.display = 'none';
      children = elm.children;
      if (this.settings.positionDropdown) {
        document.body.appendChild(this.dropdown);
        this.dropdown.style.left = '-9999px';
      }
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        switch (child.tagName) {
          case 'OPTION':
            method = renderOption;
            break;
          case 'OPTGROUP':
            method = renderOptionGroup;
        }
        this.dropdown.appendChild(method(child, this));
      }
      if (this.default_selected) {
        this.default_selected[0].better_version.select();
      }
      this.selected_option.addEventListener('click', function() {
        if (_this.open) {
          if (_this.focused_option) {
            _this.focused_option.select();
          }
        } else {
          _this.set_focused(_this.dropdown_selected_option);
        }
        return _this.toggle();
      });
      window.addEventListener('click', function(e) {
        if (!(e.target === _this.selected_option || e.target === _this.select || _this.options.indexOf(e.target) !== -1)) {
          if (_this.open) {
            return _this.toggle();
          }
        }
      });
      this.last_char = false;
      this.selected_option.addEventListener('focus', function() {
        document.body.style.overflow = 'hidden';
        return addClass(_this.select, 'focus');
      });
      this.selected_option.addEventListener('blur', function() {
        removeClass(_this.select, 'focus');
        document.body.style.overflow = 'auto';
        if (_this.open === true) {
          _this.toggle();
        }
        return true;
      });
      this.selected_option.addEventListener('keyup', function(e) {
        if ([38, 40].indexOf(e.keyCode) !== -1) {
          return e.preventDefault();
        }
      });
      this.selected_option.addEventListener('keydown', function(e) {
        return _this.process_key_event(e);
      });
      window.addEventListener('keydown', function(e) {
        if (_this.open) {
          return _this.process_key_event(e);
        }
      });
    }

    BetterSelect.prototype.focused_option = false;

    BetterSelect.prototype.focus_index = -1;

    BetterSelect.prototype.select_focused = function() {
      if (this.focused_option) {
        return this.focused_option.select();
      }
    };

    BetterSelect.prototype.process_key_event = function(e) {
      var char, isLetter, isNumber, keyCode, option;
      keyCode = e.keyCode;
      isNumber = keyCode > 47 && keyCode < 58;
      isLetter = keyCode > 64 && keyCode < 91;
      if (keyCode === 9 && this.open) {
        return this.select_focused();
      }
      if (!([13, 38, 40].indexOf(keyCode) !== -1 || isLetter || isNumber)) {
        return;
      }
      if ([13, 38, 40].indexOf(keyCode) !== -1 && this.open === false) {
        this.toggle();
      }
      switch (keyCode) {
        case 38:
          this.set_focused(this.options[(this.focus_index -= 1) < 0 ? this.focus_index = this.options.length - 1 : this.focus_index]);
          break;
        case 40:
          this.set_focused(this.options[(this.focus_index += 1) >= this.options.length ? this.focus_index = 0 : this.focus_index]);
          break;
        case 13:
          this.select_focused();
          break;
        default:
          if (isNumber) {
            char = numbers[new String(keyCode - 48)];
          } else if (isLetter) {
            char = letters[keyCode - 65];
          }
          if (char && this.options_by_first_char[char]) {
            if (!this.open) {
              this.toggle();
            }
            if (this.last_char !== char) {
              this.options_by_first_char[char].sort();
            }
            option = this.options_by_first_char[char].shift();
            this.options_by_first_char[char].push(option);
            this.set_focused(option);
            this.focus_index = this.options.indexOf(option);
            this.last_char = char;
          }
      }
      e.preventDefault();
      e.stopPropagation();
      return e.returnValue = false;
    };

    BetterSelect.prototype.set_focused = function(option) {
      var class_for_selected,
        _this = this;
      class_for_selected = function(option) {
        if (_this.selected_option && option.innerHTML === _this.selected_option.innerHTML) {
          return " selected";
        } else {
          return "";
        }
      };
      if (this.focused_option) {
        this.focused_option.setAttribute('class', "option" + (class_for_selected(this.focused_option)));
      }
      this.focused_option = option;
      this.focused_option.setAttribute("class", "option focus" + (class_for_selected(option)));
      this.focus_index = this.options.indexOf(this.focused_option);
      return this.focused_option.scrollIntoView();
    };

    BetterSelect.prototype.open = false;

    BetterSelect.prototype.toggle = function() {
      var height, top;
      ((this.open = !this.open) ? addClass : removeClass)(this.select, 'open');
      if (this.settings.resizeDropdown) {
        this.dropdown.style.width = this.select.offsetWidth + 'px';
      }
      if (this.settings.positionDropdown) {
        if (this.dropdown.offsetHeight > window.innerHeight) {
          height = window.innerHeight * .50;
          this.dropdown.style.height = height + 'px';
          this.dropdown.style['overflow-y'] = 'auto';
          if (this.dropdown_selected_option.offsetTop > height || this.adjust_height) {
            this.dropdown_selected_option.scrollIntoView();
            this.adjust_height = true;
          }
        }
        top = top || (getTop(this.select) - this.dropdown_selected_option.offsetTop);
        top = getTop(this.select) - (this.dropdown_selected_option.offsetTop - this.dropdown.scrollTop);
        this.dropdown.style.top = (top < 0 ? 0 : top) + 'px';
        this.dropdown.style.left = this.open ? getLeft(this.select) + 'px' : '-9999px';
      }
      return _(this.options_by_first_char).each(function(options) {
        return options.sort();
      });
    };

    BetterSelect.prototype.reset = function(option) {
      if (this.default_selected) {
        return this.default_selected[0].better_version.select();
      }
    };

    BetterSelect.prototype.set_selected = function(option) {
      var e;
      if (this.selected_option.innerHTML !== option.innerHTML) {
        if (this.dropdown_selected_option) {
          removeClass(this.dropdown_selected_option, 'selected');
        }
        addClass(this.dropdown_selected_option = option, 'selected');
        this.selected_option.innerHTML = option.innerHTML;
        e = document.createEvent('Event');
        e.initEvent('change', true, true);
        this.select.orig.dispatchEvent(e);
      }
      return this.selected_option.focus();
    };

    BetterSelect.prototype.option_template = '<div class="option"><%= innerHTML %></div>';

    BetterSelect.prototype.option_group_template = '<div class="optgroup"><div class="option-group-label"><%= label %></div></div>';

    BetterSelect.prototype.select_template = '<div class="select better-select"><a href="javascript:void(0)" class="selected-option"></a><div class="better-select-dropdown dropdown"></div></div>';

    BetterSelect.prototype.process_option = function(option) {
      return option;
    };

    BetterSelect.prototype.process_option_group = function(option_group) {
      return option_group;
    };

    BetterSelect.prototype.process_select = function(select) {
      return select;
    };

    return BetterSelect;

  })();

  window.BetterSelect = BetterSelect;

}).call(this);
